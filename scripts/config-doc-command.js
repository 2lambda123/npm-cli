const { definitions } = require('../lib/utils/config/index.js')
const { writeFileSync, readFileSync } = require('fs')
const { resolve } = require('path')

const configDoc = process.argv[2]
const commandFile = process.argv[3]

// Note: commands without params skip this whole process.
const {
  params,
  usage,
  alias,
  options,
} = require(resolve(commandFile))

const describeAll = (content) =>
  content.map(name => definitions[name].describe()).join(
    '\n\n<!-- automatically generated, do not edit manually -->\n' +
      '<!-- see lib/utils/config/definitions.js -->\n\n'
  )

const describeUsage = ({ usage, alias, options }) => {
  const synopsis = []
  synopsis.push('\n```bash')

  if (usage) {
    synopsis.push(usage.join('\n'))
  }

  if (alias) {
    synopsis.push('\nalias: ' + alias.join(', '))
  }

  if (options) {
    synopsis.push('\ncommon options:')
    synopsis.push(options.join('\n'))
  }

  synopsis.push('```')
  return synopsis.join('\n')
}

const addBetweenTags = (
  doc,
  startTag,
  endTag,
  body,
  sourceFilepath = 'lib/utils/config/definitions.js') => {
  const startSplit = doc.split(startTag)

  if (startSplit.length !== 2) {
    throw new Error('Did not find exactly one start tag')
  }

  const endSplit = startSplit[1].split(endTag)
  if (endSplit.length !== 2) {
    throw new Error('Did not find exactly one end tag')
  }

  return [
    startSplit[0],
    startTag,
    '\n<!-- automatically generated, do not edit manually -->\n' +
      '<!-- see ' + sourceFilepath + ' -->\n',
    body,
    '\n\n<!-- automatically generated, do not edit manually -->\n' +
      '<!-- see ' + sourceFilepath + ' -->',
    '\n\n',
    endTag,
    endSplit[1],
  ].join('')
}

const addDescriptions = doc => {
  const startTag = '<!-- AUTOGENERATED CONFIG DESCRIPTIONS START -->'
  const endTag = '<!-- AUTOGENERATED CONFIG DESCRIPTIONS END -->'

  console.log('adding config descriptions')
  console.log({ params })
  return addBetweenTags(doc, startTag, endTag, describeAll(params))
}

const addUsageDescriptions = doc => {
  const startTag = '<!-- AUTOGENERATED USAGE DESCRIPTIONS START -->'
  const endTag = '<!-- AUTOGENERATED USAGE DESCRIPTIONS END -->'

  console.log('adding usage descriptions')
  console.log({ usage })
  return addBetweenTags(doc, startTag, endTag,
    describeUsage({ usage, alias, options }),
    commandFile
  )
}

// always write SOMETHING so that Make sees the file is up to date.
const doc = readFileSync(configDoc, 'utf8')
const hasTag = doc.includes('<!-- AUTOGENERATED CONFIG DESCRIPTIONS START -->')
const hasUsageTag = doc.includes('<!-- AUTOGENERATED USAGE DESCRIPTIONS START -->')

let newDoc = params && hasTag ? addDescriptions(doc) : doc
newDoc = usage && hasUsageTag ? addUsageDescriptions(newDoc) : newDoc

if (params && !hasTag) {
  console.error('WARNING: did not find config description section', configDoc)
}

if ((usage || alias || options) && !hasUsageTag) {
  console.error('WARNING: did not find usage description section', configDoc)
}
writeFileSync(configDoc, newDoc)
